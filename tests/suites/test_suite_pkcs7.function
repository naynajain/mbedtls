/* BEGIN_HEADER */
#include "mbedtls/bignum.h"
#include "mbedtls/pkcs7.h"
#include "mbedtls/x509.h"
#include "mbedtls/x509_crt.h"
#include "mbedtls/x509_crl.h"
#include "mbedtls/oid.h"
#include "sys/types.h"
#include "sys/stat.h"
#include "unistd.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void pkcs7_verify( char *pkcs7_file, char *crt, char *filetobesigned )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    unsigned char *data = NULL;
    struct stat st;
    size_t datalen;
    int res;
    FILE *file;

    mbedtls_pkcs7 pkcs7;
    mbedtls_x509_crt x509;

    mbedtls_pkcs7_init( &pkcs7 );
    mbedtls_x509_crt_init( &x509 );

    res = mbedtls_x509_crt_parse_file( &x509, crt );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    res = stat(filetobesigned, &st);
    TEST_ASSERT( res == 0 );

    file = fopen( filetobesigned, "r" );
    TEST_ASSERT( file != NULL );

    datalen = st.st_size;
    data = ( unsigned char* ) calloc( datalen, sizeof( unsigned char ) );
    TEST_ASSERT( data != NULL);

    buflen = fread( (void *)data , sizeof( unsigned char ), datalen, file );
    TEST_ASSERT( buflen == datalen);
    fclose( file );

    res = mbedtls_pkcs7_signed_data_verify( &pkcs7, &x509, data, datalen );
    TEST_ASSERT( res == 0 );

exit:
    mbedtls_x509_crt_free( &x509 );
    mbedtls_free( data );
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_verify_hash( char *pkcs7_file, char *crt, char *filetobesigned )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    unsigned char *data = NULL;
    unsigned char hash[32];
    struct stat st;
    size_t datalen;
    int res;
    FILE *file;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_type_t md_alg;

    mbedtls_pkcs7 pkcs7;
    mbedtls_x509_crt x509;

    mbedtls_pkcs7_init( &pkcs7 );
    mbedtls_x509_crt_init( &x509 );

    res = mbedtls_x509_crt_parse_file( &x509, crt );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    res = stat(filetobesigned, &st);
    TEST_ASSERT( res == 0 );

    file = fopen( filetobesigned, "r" );
    TEST_ASSERT( file != NULL );

    datalen = st.st_size;
    data = ( unsigned char* ) calloc( datalen, sizeof( unsigned char ) );
    TEST_ASSERT( data != NULL);

    buflen = fread( (void *)data , sizeof( unsigned char ), datalen, file );
    TEST_ASSERT( buflen == datalen);
    fclose( file );

    res = mbedtls_oid_get_md_alg( &(pkcs7.signed_data.digest_alg_identifiers.buf), &md_alg );
    TEST_ASSERT( res == 0 );
    TEST_ASSERT( md_alg == MBEDTLS_MD_SHA256 );

    md_info = mbedtls_md_info_from_type( md_alg );

    mbedtls_md( md_info, data, datalen, hash );

    res = mbedtls_pkcs7_signed_hash_verify( &pkcs7, &x509, hash, sizeof(hash));
    TEST_ASSERT( res == 0 );

exit:
    mbedtls_x509_crt_free( &x509 );
    mbedtls_free( data );
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_verify_fail1( char *pkcs7_file, char *crt, char *filetobesigned )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    unsigned char *data = NULL;
    struct stat st;
    size_t datalen;
    int res;
    FILE *file;

    mbedtls_pkcs7 pkcs7;
    mbedtls_x509_crt x509;

    mbedtls_pkcs7_init( &pkcs7 );
    mbedtls_x509_crt_init( &x509 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    res = mbedtls_x509_crt_parse_file( &x509, crt );
    TEST_ASSERT( res == 0 );

    res = stat(filetobesigned, &st);
    TEST_ASSERT( res == 0 );

    file = fopen( filetobesigned, "r" );
    TEST_ASSERT( file != NULL );

    datalen = st.st_size;
    data = ( unsigned char* ) calloc( datalen, sizeof( unsigned char ) );
    buflen = fread( ( void * )data , sizeof( unsigned char ), datalen, file );
    TEST_ASSERT( buflen == datalen);

    fclose(file);

    res = mbedtls_pkcs7_signed_data_verify( &pkcs7, &x509, data, datalen );
    TEST_ASSERT( res != 0 );

exit:
    mbedtls_x509_crt_free( &x509 );
    mbedtls_free( data );
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_verify_fail2( char *pkcs7_file, char *crt, char *filetobesigned )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    unsigned char *data = NULL;
    struct stat st;
    size_t datalen;
    int res;
    FILE *file;

    mbedtls_pkcs7 pkcs7;
    mbedtls_x509_crt x509;

    mbedtls_pkcs7_init( &pkcs7 );
    mbedtls_x509_crt_init( &x509 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    res = mbedtls_x509_crt_parse_file( &x509, crt );
    TEST_ASSERT( res == 0 );

    res = stat(filetobesigned, &st);
    TEST_ASSERT( res == 0 );

    file = fopen( filetobesigned, "r" );
    TEST_ASSERT( file != NULL );

    datalen = st.st_size;
    data = ( unsigned char* ) calloc( datalen, sizeof(unsigned char) );
    buflen = fread( ( void * )data , sizeof( unsigned char ), datalen, file );
    TEST_ASSERT( buflen == datalen);

    fclose(file);

    res = mbedtls_pkcs7_signed_data_verify( &pkcs7, &x509, data, datalen );
    TEST_ASSERT( res != 0 );

exit:
    mbedtls_x509_crt_free( &x509 );
    mbedtls_pkcs7_free( &pkcs7 );
    mbedtls_free( data );
    mbedtls_free( pkcs7_buf );

}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_parse_version( char *pkcs7_file )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    int res;
    mbedtls_pkcs7 pkcs7;

    mbedtls_pkcs7_init( &pkcs7 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    TEST_ASSERT( pkcs7.signed_data.version == 1 );
exit:
    mbedtls_pkcs7_free( &pkcs7 );
    mbedtls_free( pkcs7_buf );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_parse_content_oid( char *pkcs7_file )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    int res;
    mbedtls_pkcs7 pkcs7;

    mbedtls_pkcs7_init( &pkcs7 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen);
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res != 0 );
    TEST_ASSERT( res == MBEDTLS_ERR_PKCS7_FEATURE_UNAVAILABLE );
exit:
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_parse_cert_chain( char *pkcs7_file )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    int res;
    mbedtls_pkcs7 pkcs7;

    mbedtls_pkcs7_init( &pkcs7 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );
exit:
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */

/* BEGIN_CASE */
void pkcs7_parse_multiple_sign( char *pkcs7_file )
{
    unsigned char *pkcs7_buf = NULL;
    size_t buflen;
    int res;
    mbedtls_pkcs7 pkcs7;
    char name_buf[1000];
    const char *issuer = "C=NL, O=PolarSSL, CN=PolarSSL Test CA";

    mbedtls_pkcs7_init( &pkcs7 );

    res = mbedtls_pkcs7_load_file( pkcs7_file, &pkcs7_buf, &buflen );
    TEST_ASSERT( res == 0 );

    res = mbedtls_pkcs7_parse_der( pkcs7_buf, buflen, &pkcs7 );
    TEST_ASSERT( res == MBEDTLS_PKCS7_SIGNED_DATA );

    mbedtls_x509_dn_gets( name_buf, sizeof(name_buf), &pkcs7.signed_data.signers.issuer );
    TEST_ASSERT( strncmp(name_buf, issuer, strlen(issuer)) == 0 );

    memset( name_buf, 0, sizeof( name_buf ) );
    mbedtls_x509_serial_gets( name_buf, sizeof(name_buf), &pkcs7.signed_data.signers.serial );
    TEST_ASSERT( strncmp(name_buf, "01", 2) == 0 );
exit:
    mbedtls_free( pkcs7_buf );
    mbedtls_pkcs7_free( &pkcs7 );
}
/* END_CASE */
